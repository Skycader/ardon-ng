Основные правила:

О размерах и не только:
0.1 Ограничения на длину файлов нет, однако рекоменадция не более 1000 строк (исключая импорты). 
0.1.1 Ограничение на длину метода: 100 строк.В противном случае в методе слишком много низкоуровневых вызовов, которые надо выделить отдельно.
0.1.2. Ограничения на длину сущности шаблона (компонента) 50 строк, (рекомендовано 30 строк), т.е. отдельная смысловая еденица шаблона должна влазить в 50 строк кода (16:9 монитор), если не влазиет - разбивать на подкомпоненты.
0.2 Читабельность важна: вложенность кода - не более 4 пунктов (Flat is better than nested), включая функциональную вложенность. Лучше используйте цепочки вызовов. 
0.3 Не повторяйтесь. Код должен быть реюзабельным - то есть путем импортирования, а не путем копирования.
0.4 Ваш случай не настолько особенный, чтобы нарушать эти правила (Special cases aren't special enough to break the rules).
0.5 Пишите декларативный код. Не совмещайте императивный код и декларативный в одном файле.
0.6 Прстой код лучше комплексного (прицип KISS)

1. Вёрстка:
1.0 Подход к вёрстке делится на 2 этапа: рарзработка/доработка UI/UX библиотеки, применение UI/UX библиотеки.
1.0.1 UI/UX библиотека использует сгенерированную(ие) темы Angular Material, ни в коем случае не перезаписывать внутри компонентов.
Например конструктор https://materialtheme.arcsine.dev/
1.0.2 UI/UX темы обеспечиваются boostrap'ом и пакетом(ами) тем Angular Material, например dark-theme.scss, сгенерированными одним из конструкторов.
1.0.3 UI/UX тема определяет цвета один раз, далее внутри компонентов нельзя перезаписывать цвет.
1.0.4. Не использовать переменные цветов отдельно от файла стилей темы.
1.1 Использовать Bootstrap - подход к верстке должен быть один.
1.2 Вложенность внутри вёрстки не должна превышать 4 блока в худшем случае, в  среднем 3 (повышает читабельность).

1.3 Angular шаблоны делить на: Smart и Dumb, то есть те, что используют логику и те, что только отрисовывают (и при этом стратегия обновления OnPush)

1.4 SASS лучше BEM - использовать вложенность SASS, помимо его остальных инструментов.
1.5 Использовать HTML для структуры, CSS для отображения.
1.6 Перезатирающие стили должны быть расположены в папке styles/override/*, например mat-btn.override.scss (не использовать ng-deep)
1.6.1 Импортировать стили перезаписи в файл root.override.scss, тот в свою очередь импортировать в styles.scss.
1.7. Для изменения отображаемых данных использовать только папйпы.
1.8 Для расширения шаблона использовать директивы.
1.9 Пользуйтесь покмопнентами Angular Material.

2. Angular
2.1 Использовать деления на императивные и декларативные сервисы - те, что делают низкоуровневый код и те, что пользуются методами из низкоуровневой (императивной) службы.
2.2 Вложенность кода в шаблоне, .scss и .ts файлах - не должна превышать 4-й степени.
2.3 Измените префикс проекта в angular.json
2.4 Пишите реюзабельные компоненты.
2.5 Пользуйтесь резолверами.
2.6 Мутируйте данные стрима только в пайпе.
2.7 Модули должны лежать внутри app.
2.8 Роуты отдельного модуля должны регистрироваться в этом модуле при помощи RouterModule.forChild
2.9 Структура модуля на примере:
auth/components  <= для компонентов
auth/layouts <= для комопнентов-страниц
auth/utils <= directives, pipes, resolvers, guards
auth/services <= для служб
2.10 Компоненты layout именовать auth-layout.component.html, они же dumb компоненты.

3. NgRx - желателен (очень).

3.1 NgRx debug tools позволят отследить все изменения данных.


4. RxJS:
4.1 Концепций всё есть stream$ - запрещено использовать subscribe (вместо этого использовать пайп async);
setInterval заменить на пайп interval, timer, использовать пайпы перенаправления стримов.

5. Автотесты перед коммитом.

6. Явное лучше неявного. 
ngOnInit(){} => public ngOnInit(): void

7. Интерфейсы должны быть читабельными - AuthResponseInterface, не public getUser(): .{name: string}


8. Пользоваться дженериками.
9. Миниимум (а то и запретить) any в pull request.

10. Об API:
- API должно быть гибким. 
- Данные должы быть разделены на чанки.
11. Расширяйте код при помощи прототипизирвоания.
12. Использовать lodash - огромное множество методов (сортировка, обработчики, фильтры, цепочки), которые упростят разработку и повысят читабельность кода, вместо того, чтобы думать как, будем думать что. 
13. Использовать monent.js для обрабокти дат внутри сервисов.
14. Git
14.0 Git Flow
14.1 Коммиты должны быть атомарными

15. Использовать JSDoc помимо четкого наименования свойств и методов.

16. ng lint перед ng build