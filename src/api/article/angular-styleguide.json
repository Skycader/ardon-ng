{
  "heading": "Angular Style Guide",
  "description": "О том, как лучше писать масштабируемый и поддерживаемый код.",
  "subheader": "Лучшие код практики",
  "coverImageSrc": "https://i.imgur.com/1ox0Zz7.png",
  "themeImageSrc": "https://www.mariokandut.com/static/c5aeb42506ebdae627ebf9e00f977e4f/f2fb1/angular-logo.webp",
  "blocks": [
    {
      "type": "text",
      "content": {
        "paragraphs": ["Как писать масштабируемый и поддерживаемый код."]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Размеры файлов" } },
    {
      "type": "accordion",
      "content": {
        "title": "Размеры файлов",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Ограничения на длину файлов нет, однако рекоменадция не более 1000 строк (исключая импорты). ",
                "Ограничение на длину метода: 100 строк.В противном случае в методе слишком много низкоуровневых вызовов, которые надо выделить отдельно.",
                "Ограничения на длину сущности шаблона (компонента) 50 строк, (рекомендовано 30 строк), т.е. отдельная смысловая еденица шаблона должна влазить в 50 строк кода (16:9 монитор), если не влазиет - разбивать на подкомпоненты.",
                "Читабельность важна: вложенность кода - не более 4 пунктов (Flat is better than nested), включая функциональную вложенность. Лучше используйте цепочки вызовов. ",
                "Декларативный код лучше императивного – при чтении кода при взгляде на название метода мы уже понимаем, что он делает – вместо того, чтобы читать его тело или результат отрицания метода. Пример: *ngIf=\"isLoggedIn\" и *ngIf=\"!isLoggedIn\" → ошибочно, читабельность лучше в случае *ngIf=\"isAnonymous\".",
                "Не повторяйтесь. Код должен быть реюзабельным - то есть путем импортирования, а не путем копирования.",
                "Ваш случай не настолько особенный, чтобы нарушать эти правила (Special cases aren't special enough to break the rules).",
                "Пишите декларативный код. Не совмещайте императивный код и декларативный в одном файле.",
                "Прстой код лучше комплексного (прицип KISS)",
                "Не используйте else без необходимости. Используйте блоки return, чтобы сразу отрезать верные ответы. "
              ]
            }
          },
          {
            "type": "text",
            "content": {
              "paragraphs": [
                "Пример:",
                "function (day: number) {",
                "if (day === 1) return 'Monday'",
                "   return 'Not monday'",
                "}",
                "Читабельней, чем:",
                "function (day: number) {",
                "if (day === 1) {",
                "   return 'Monday' ",
                "} else {",
                "   return 'Not monday'",
                "}"
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Вёрстка" } },
    {
      "type": "accordion",
      "content": {
        "title": "Вёрстка",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Подход к вёрстке делится на 2 этапа: рарзработка/доработка UI/UX библиотеки, применение UI/UX библиотеки.",
                "UI/UX библиотека использует сгенерированную(ие) темы Angular Material, ни в коем случае не перезаписывать внутри компонентов.",
                "Например конструктор https://materialtheme.arcsine.dev/",
                "UI/UX темы обеспечиваются boostrap'ом и пакетом(ами) тем Angular Material, например dark-theme.scss, сгенерированными одним из конструкторов.",
                "UI/UX тема определяет цвета один раз, далее внутри компонентов нельзя перезаписывать цвет.",
                "Не использовать переменные цветов отдельно от файла стилей темы.",
                "svg иконки должны быть отдельными компонентами из модуля svg-icons",
                "Использовать Bootstrap - подход к верстке должен быть один.",
                "Вложенность внутри вёрстки не должна превышать 4 блока в худшем случае, в  среднем 3 (повышает читабельность).",
                "Angular шаблоны делить на: Smart и Dumb, то есть те, что используют логику и те, что только отрисовывают (и при этом стратегия обновления OnPush)",
                "SASS лучше BEM - использовать вложенность SASS, помимо его остальных инструментов.",
                "Использовать HTML для структуры, CSS для отображения.",
                "Перезатирающие стили должны быть расположены в папке styles/override/*, например mat-btn.override.scss (не использовать ng-deep)",
                "Импортировать стили перезаписи в файл root.override.scss, тот в свою очередь импортировать в styles.scss.",
                "Для изменения отображаемых данных использовать только папйпы.",
                "Для расширения шаблона использовать директивы.",
                "Пользуйтесь покмопнентами Angular Material."
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    {
      "type": "subheading",
      "content": { "title": "Архитектура Angular приложения" }
    },
    {
      "type": "accordion",
      "content": {
        "title": "Angular",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Использовать деления на императивные и декларативные сервисы - те, что делают низкоуровневый код и те, что пользуются методами из низкоуровневой (императивной) службы.",
                "Вложенность кода в шаблоне, .scss и .ts файлах - не должна превышать 4-й степени.",
                "Измените префикс проекта в angular.json",
                "Пишите реюзабельные компоненты.",
                "Пользуйтесь резолверами.",
                "Мутируйте данные стрима только в пайпе.",
                "Модули должны лежать внутри app.",
                "Роуты отдельного модуля должны регистрироваться в этом модуле при помощи RouterModule.forChild"
              ]
            }
          },
          {
            "type": "text",
            "content": { "paragraphs": ["Структура модуля:"] }
          },
          {
            "type": "list",
            "content": {
              "items": [
                "auth/components  <= для компонентов",
                "auth/layouts <= для комопнентов-страниц",
                "auth/utils <= directives, pipes, resolvers, guards",
                "auth/services <= для служб",
                "Компоненты layout именовать auth-layout.component.html, они же dumb компоненты."
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Об NgRx" } },
    {
      "type": "accordion",
      "content": {
        "title": "Об NGRX",
        "blocks": [
          { "type": "text", "content": { "paragraphs": ["Плюсы NGRX"] } },
          {
            "type": "list",
            "content": {
              "items": [
                "Значительно упрощает отладку приложения",
                "Лучшее качество кода",
                "Код масштабируется",
                "Работа с асинхронным кодом упрощается",
                "Непрямой поток данных позволяет писать большие приложения не усложняя код",
                "Декларативный подход",
                "Компоненты ничего не знают про бизнес логику"
              ]
            }
          },
          {
            "type": "text",
            "content": { "paragraphs": ["Как писать на NGRX"] }
          },
          {
            "type": "list",
            "content": {
              "items": [
                "Один экшин - один вызов",
                "Для каждой сущности - свой файл с эффектами",
                "Редюсер - один файл",
                "Action типы - один файл"
              ]
            }
          },
          {
            "type": "text",
            "content": { "paragraphs": ["Порядок внедрения NGRX"] }
          },
          {
            "type": "list",
            "content": {
              "items": [
                "Описать модели",
                "Создать службу(ы)",
                "Описать экшин типы (action-types.enum.ts)",
                "Создать экшины",
                "Создать стэйт",
                "Там же создать редюсер",
                "Создать эффекты",
                "Диспатчить из компонентов"
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Об RxJS" } },
    {
      "type": "accordion",
      "content": {
        "title": "Об RxJS",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Концепций всё есть stream$ - запрещено использовать subscribe (вместо этого использовать пайп async);",
                "setInterval заменить на пайп interval, timer, использовать пайпы перенаправления стримов."
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    {
      "type": "subheading",
      "content": { "title": "Автотесты перед коммитом" }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    {
      "type": "accordion",
      "content": {
        "title": "О тестировании",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Прежде чем коммитить в ветку, проведите тестирование приложения"
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Пара советов" } },
    {
      "type": "accordion",
      "content": {
        "title": "Ещё пара советов",
        "blocks": [
          {
            "type": "list",
            "content": {
              "items": [
                "Явное лучше неявного: ngOnInit(){} => public ngOnInit(): void",
                "Интерфейсы должны быть читабельными - AuthResponseInterface, не public getUser(): .{name: string}",
                "Пользоваться дженериками при использовании httpClient",
                "Не используйте any",
                "Не оставляйте код без моделей",
                "Расширяйте код при помощи прототипизирвоания",
                "Использовать lodash - огромное множество методов (сортировка, обработчики, фильтры, цепочки), которые упростят разработку и повысят читабельность кода, вместо того, чтобы думать как, будем думать что. ",
                "Использовать Moment.js"
              ]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Пару слов про API" } },
    {
      "type": "accordion",
      "content": {
        "title": "Об API",
        "blocks": [
          { "type": "text", "content": { "paragraphs": ["Требования к API"] } },
          {
            "type": "list",
            "content": {
              "items": ["Гибкий", "Данные поделены на чанки (пагинация)"]
            }
          }
        ]
      }
    },
    { "type": "text", "content": { "paragraphs": [""] } },
    { "type": "subheading", "content": { "title": "Инструменты" } },
    {
      "type": "accordion",
      "content": {
        "title": "Инструменты",
        "blocks": [{ "type": "list", "content": { "items": ["Пишите JSDoc"] } }]
      }
    }
  ]
}
